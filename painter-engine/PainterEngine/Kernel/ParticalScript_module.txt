#name "main"
host float partical_rand();

set vector
{
float x,y,z;
}

set hdr_color
{
int g,b,r,a;
}

set Partical_Init_Info
{
int	generateDuration;
int	maxCount;
vector  force;
float   resistanceK;
int     launchCount;
}

set PARTICAL_ATOM_INFO
{
float   size;
float   rotation;
float   mass;
float   alpha;
int     aliveTime;
int     elpasedTime;
vector  position;
vector  velocity;
float   hdrR;
float   hdrG;
float   hdrB;
float   rotationSpeed;
float   sizeIncrement;
float   alphaIncrement;
}

Partical_Init_Info g_particalInitInfo;
PARTICAL_ATOM_INFO atomInfo;

export Partical_Init_Info *Partical_Init()
{
  g_particalInitInfo.generateDuration=25;
  g_particalInitInfo.maxCount=128;
  g_particalInitInfo.force.x=0;
  g_particalInitInfo.force.y=0;
  g_particalInitInfo.force.z=0;
  g_particalInitInfo.resistanceK=0;
  g_particalInitInfo.launchCount=-1;
  return &g_particalInitInfo;
}

export PARTICAL_ATOM_INFO *Partical_Create(int index)
{
  atomInfo.size=0.5+partical_rand()/2;
  atomInfo.rotation=partical_rand()*360;
  atomInfo.mass=1.0;
  atomInfo.alpha=1;
  atomInfo.aliveTime=3000;
  atomInfo.elpasedTime=0;
  atomInfo.position.x=0;
  atomInfo.position.y=0;
  atomInfo.position.z=0;
  
  atomInfo.velocity.x=300*partical_rand()-150;
  atomInfo.velocity.y=300*partical_rand()-150;
  atomInfo.velocity.z=0;

  atomInfo.hdrR=0.75+partical_rand()/4;
  atomInfo.hdrG=0.75+partical_rand()/4;
  atomInfo.hdrB=0.75+partical_rand()/4;

  atomInfo.rotationSpeed=360*partical_rand();
  atomInfo.alphaIncrement=-0.45;
  atomInfo.sizeIncrement=-0.35;

  return &atomInfo;
}


export void Partical_Atom_Update(PARTICAL_ATOM_INFO *atomInfo)
{

}
